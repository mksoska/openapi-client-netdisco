# coding: utf-8

"""
    App::Netdisco

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.050003
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_netdisco.api_client import ApiClient
from openapi_netdisco.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ObjectsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_object_device_ip_device_ips_get(self, ip, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_device_ips_get  # noqa: E501

        Returns device_ips rows for a given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_device_ips_get(ip, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[Address]
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_device_ips_get_with_http_info(ip, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_device_ips_get_with_http_info(self, ip, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_device_ips_get  # noqa: E501

        Returns device_ips rows for a given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_device_ips_get_with_http_info(ip, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[Address], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'ip'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_device_ips_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_device_ips_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {
            200: "list[Address]",
        }

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}/device_ips', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_device_ip_get(self, ip, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_get  # noqa: E501

        Returns a row from the device table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_get(ip, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Device
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_get_with_http_info(ip, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_get_with_http_info(self, ip, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_get  # noqa: E501

        Returns a row from the device table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_get_with_http_info(ip, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Device, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'ip'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {
            200: "Device",
        }

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_device_ip_modules_get(self, ip, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_modules_get  # noqa: E501

        Returns modules rows for a given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_modules_get(ip, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_modules_get_with_http_info(ip, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_modules_get_with_http_info(self, ip, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_modules_get  # noqa: E501

        Returns modules rows for a given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_modules_get_with_http_info(ip, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ip'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_modules_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_modules_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}/modules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_device_ip_nodes_get(self, ip, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_nodes_get  # noqa: E501

        Returns the nodes found on a given Device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_nodes_get(ip, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param active_only: Restrict results to active Nodes only
        :type active_only: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_nodes_get_with_http_info(ip, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_nodes_get_with_http_info(self, ip, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_nodes_get  # noqa: E501

        Returns the nodes found on a given Device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_nodes_get_with_http_info(ip, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param active_only: Restrict results to active Nodes only
        :type active_only: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ip',
            'active_only'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_nodes_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_nodes_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501

        query_params = []
        if 'active_only' in local_var_params and local_var_params['active_only'] is not None:  # noqa: E501
            query_params.append(('active_only', local_var_params['active_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}/nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_device_ip_port_port_active_nodes_get(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_active_nodes_get  # noqa: E501

        Returns active_nodes rows for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_active_nodes_get(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_port_port_active_nodes_get_with_http_info(ip, port, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_port_port_active_nodes_get_with_http_info(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_active_nodes_get  # noqa: E501

        Returns active_nodes rows for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_active_nodes_get_with_http_info(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ip',
            'port'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_port_port_active_nodes_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_port_port_active_nodes_get`")  # noqa: E501
        # verify the required parameter 'port' is set
        if self.api_client.client_side_validation and ('port' not in local_var_params or  # noqa: E501
                                                        local_var_params['port'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `port` when calling `api_v1_object_device_ip_port_port_active_nodes_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501
        if 'port' in local_var_params:
            path_params['port'] = local_var_params['port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}/port/{port}/active_nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_device_ip_port_port_active_nodes_with_age_get(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_active_nodes_with_age_get  # noqa: E501

        Returns active_nodes_with_age rows for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_active_nodes_with_age_get(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_port_port_active_nodes_with_age_get_with_http_info(ip, port, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_port_port_active_nodes_with_age_get_with_http_info(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_active_nodes_with_age_get  # noqa: E501

        Returns active_nodes_with_age rows for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_active_nodes_with_age_get_with_http_info(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ip',
            'port'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_port_port_active_nodes_with_age_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_port_port_active_nodes_with_age_get`")  # noqa: E501
        # verify the required parameter 'port' is set
        if self.api_client.client_side_validation and ('port' not in local_var_params or  # noqa: E501
                                                        local_var_params['port'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `port` when calling `api_v1_object_device_ip_port_port_active_nodes_with_age_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501
        if 'port' in local_var_params:
            path_params['port'] = local_var_params['port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}/port/{port}/active_nodes_with_age', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_device_ip_port_port_agg_master_get(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_agg_master_get  # noqa: E501

        Returns the related agg_master table entry for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_agg_master_get(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_port_port_agg_master_get_with_http_info(ip, port, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_port_port_agg_master_get_with_http_info(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_agg_master_get  # noqa: E501

        Returns the related agg_master table entry for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_agg_master_get_with_http_info(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ip',
            'port'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_port_port_agg_master_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_port_port_agg_master_get`")  # noqa: E501
        # verify the required parameter 'port' is set
        if self.api_client.client_side_validation and ('port' not in local_var_params or  # noqa: E501
                                                        local_var_params['port'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `port` when calling `api_v1_object_device_ip_port_port_agg_master_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501
        if 'port' in local_var_params:
            path_params['port'] = local_var_params['port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}/port/{port}/agg_master', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_device_ip_port_port_get(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_get  # noqa: E501

        Returns a row from the device_port table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_get(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Port
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_port_port_get_with_http_info(ip, port, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_port_port_get_with_http_info(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_get  # noqa: E501

        Returns a row from the device_port table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_get_with_http_info(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Port, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'ip',
            'port'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_port_port_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_port_port_get`")  # noqa: E501
        # verify the required parameter 'port' is set
        if self.api_client.client_side_validation and ('port' not in local_var_params or  # noqa: E501
                                                        local_var_params['port'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `port` when calling `api_v1_object_device_ip_port_port_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501
        if 'port' in local_var_params:
            path_params['port'] = local_var_params['port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {
            200: "Port",
        }

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}/port/{port}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_device_ip_port_port_last_node_get(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_last_node_get  # noqa: E501

        Returns the related last_node table entry for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_last_node_get(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_port_port_last_node_get_with_http_info(ip, port, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_port_port_last_node_get_with_http_info(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_last_node_get  # noqa: E501

        Returns the related last_node table entry for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_last_node_get_with_http_info(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ip',
            'port'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_port_port_last_node_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_port_port_last_node_get`")  # noqa: E501
        # verify the required parameter 'port' is set
        if self.api_client.client_side_validation and ('port' not in local_var_params or  # noqa: E501
                                                        local_var_params['port'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `port` when calling `api_v1_object_device_ip_port_port_last_node_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501
        if 'port' in local_var_params:
            path_params['port'] = local_var_params['port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}/port/{port}/last_node', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_device_ip_port_port_logs_get(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_logs_get  # noqa: E501

        Returns logs rows for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_logs_get(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_port_port_logs_get_with_http_info(ip, port, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_port_port_logs_get_with_http_info(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_logs_get  # noqa: E501

        Returns logs rows for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_logs_get_with_http_info(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ip',
            'port'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_port_port_logs_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_port_port_logs_get`")  # noqa: E501
        # verify the required parameter 'port' is set
        if self.api_client.client_side_validation and ('port' not in local_var_params or  # noqa: E501
                                                        local_var_params['port'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `port` when calling `api_v1_object_device_ip_port_port_logs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501
        if 'port' in local_var_params:
            path_params['port'] = local_var_params['port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}/port/{port}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_device_ip_port_port_neighbor_get(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_neighbor_get  # noqa: E501

        Returns the related neighbor table entry for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_neighbor_get(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_port_port_neighbor_get_with_http_info(ip, port, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_port_port_neighbor_get_with_http_info(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_neighbor_get  # noqa: E501

        Returns the related neighbor table entry for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_neighbor_get_with_http_info(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ip',
            'port'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_port_port_neighbor_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_port_port_neighbor_get`")  # noqa: E501
        # verify the required parameter 'port' is set
        if self.api_client.client_side_validation and ('port' not in local_var_params or  # noqa: E501
                                                        local_var_params['port'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `port` when calling `api_v1_object_device_ip_port_port_neighbor_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501
        if 'port' in local_var_params:
            path_params['port'] = local_var_params['port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}/port/{port}/neighbor', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_device_ip_port_port_nodes_get(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_nodes_get  # noqa: E501

        Returns nodes rows for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_nodes_get(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_port_port_nodes_get_with_http_info(ip, port, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_port_port_nodes_get_with_http_info(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_nodes_get  # noqa: E501

        Returns nodes rows for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_nodes_get_with_http_info(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ip',
            'port'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_port_port_nodes_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_port_port_nodes_get`")  # noqa: E501
        # verify the required parameter 'port' is set
        if self.api_client.client_side_validation and ('port' not in local_var_params or  # noqa: E501
                                                        local_var_params['port'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `port` when calling `api_v1_object_device_ip_port_port_nodes_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501
        if 'port' in local_var_params:
            path_params['port'] = local_var_params['port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}/port/{port}/nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_device_ip_port_port_nodes_with_age_get(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_nodes_with_age_get  # noqa: E501

        Returns nodes_with_age rows for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_nodes_with_age_get(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_port_port_nodes_with_age_get_with_http_info(ip, port, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_port_port_nodes_with_age_get_with_http_info(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_nodes_with_age_get  # noqa: E501

        Returns nodes_with_age rows for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_nodes_with_age_get_with_http_info(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ip',
            'port'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_port_port_nodes_with_age_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_port_port_nodes_with_age_get`")  # noqa: E501
        # verify the required parameter 'port' is set
        if self.api_client.client_side_validation and ('port' not in local_var_params or  # noqa: E501
                                                        local_var_params['port'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `port` when calling `api_v1_object_device_ip_port_port_nodes_with_age_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501
        if 'port' in local_var_params:
            path_params['port'] = local_var_params['port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}/port/{port}/nodes_with_age', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_device_ip_port_port_power_get(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_power_get  # noqa: E501

        Returns the related power table entry for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_power_get(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_port_port_power_get_with_http_info(ip, port, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_port_port_power_get_with_http_info(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_power_get  # noqa: E501

        Returns the related power table entry for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_power_get_with_http_info(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ip',
            'port'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_port_port_power_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_port_port_power_get`")  # noqa: E501
        # verify the required parameter 'port' is set
        if self.api_client.client_side_validation and ('port' not in local_var_params or  # noqa: E501
                                                        local_var_params['port'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `port` when calling `api_v1_object_device_ip_port_port_power_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501
        if 'port' in local_var_params:
            path_params['port'] = local_var_params['port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}/port/{port}/power', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_device_ip_port_port_properties_get(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_properties_get  # noqa: E501

        Returns the related properties table entry for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_properties_get(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_port_port_properties_get_with_http_info(ip, port, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_port_port_properties_get_with_http_info(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_properties_get  # noqa: E501

        Returns the related properties table entry for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_properties_get_with_http_info(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ip',
            'port'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_port_port_properties_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_port_port_properties_get`")  # noqa: E501
        # verify the required parameter 'port' is set
        if self.api_client.client_side_validation and ('port' not in local_var_params or  # noqa: E501
                                                        local_var_params['port'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `port` when calling `api_v1_object_device_ip_port_port_properties_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501
        if 'port' in local_var_params:
            path_params['port'] = local_var_params['port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}/port/{port}/properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_device_ip_port_port_ssid_get(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_ssid_get  # noqa: E501

        Returns the related ssid table entry for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_ssid_get(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_port_port_ssid_get_with_http_info(ip, port, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_port_port_ssid_get_with_http_info(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_ssid_get  # noqa: E501

        Returns the related ssid table entry for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_ssid_get_with_http_info(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ip',
            'port'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_port_port_ssid_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_port_port_ssid_get`")  # noqa: E501
        # verify the required parameter 'port' is set
        if self.api_client.client_side_validation and ('port' not in local_var_params or  # noqa: E501
                                                        local_var_params['port'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `port` when calling `api_v1_object_device_ip_port_port_ssid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501
        if 'port' in local_var_params:
            path_params['port'] = local_var_params['port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}/port/{port}/ssid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_device_ip_port_port_vlans_get(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_vlans_get  # noqa: E501

        Returns vlans rows for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_vlans_get(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_port_port_vlans_get_with_http_info(ip, port, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_port_port_vlans_get_with_http_info(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_vlans_get  # noqa: E501

        Returns vlans rows for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_vlans_get_with_http_info(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ip',
            'port'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_port_port_vlans_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_port_port_vlans_get`")  # noqa: E501
        # verify the required parameter 'port' is set
        if self.api_client.client_side_validation and ('port' not in local_var_params or  # noqa: E501
                                                        local_var_params['port'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `port` when calling `api_v1_object_device_ip_port_port_vlans_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501
        if 'port' in local_var_params:
            path_params['port'] = local_var_params['port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}/port/{port}/vlans', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_device_ip_port_port_wireless_get(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_wireless_get  # noqa: E501

        Returns the related wireless table entry for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_wireless_get(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_port_port_wireless_get_with_http_info(ip, port, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_port_port_wireless_get_with_http_info(self, ip, port, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_port_wireless_get  # noqa: E501

        Returns the related wireless table entry for a given port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_port_wireless_get_with_http_info(ip, port, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param port: Name of the port. Use the \".../device/{ip}/ports\" method to find these. (required)
        :type port: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ip',
            'port'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_port_port_wireless_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_port_port_wireless_get`")  # noqa: E501
        # verify the required parameter 'port' is set
        if self.api_client.client_side_validation and ('port' not in local_var_params or  # noqa: E501
                                                        local_var_params['port'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `port` when calling `api_v1_object_device_ip_port_port_wireless_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501
        if 'port' in local_var_params:
            path_params['port'] = local_var_params['port']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}/port/{port}/wireless', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_device_ip_port_vlans_get(self, ip, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_vlans_get  # noqa: E501

        Returns port_vlans rows for a given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_vlans_get(ip, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_port_vlans_get_with_http_info(ip, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_port_vlans_get_with_http_info(self, ip, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_port_vlans_get  # noqa: E501

        Returns port_vlans rows for a given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_port_vlans_get_with_http_info(ip, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ip'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_port_vlans_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_port_vlans_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}/port_vlans', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_device_ip_ports_get(self, ip, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_ports_get  # noqa: E501

        Returns ports rows for a given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_ports_get(ip, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[Port]
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_ports_get_with_http_info(ip, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_ports_get_with_http_info(self, ip, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_ports_get  # noqa: E501

        Returns ports rows for a given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_ports_get_with_http_info(ip, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[Port], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'ip'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_ports_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_ports_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {
            200: "list[Port]",
        }

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}/ports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_device_ip_powered_ports_get(self, ip, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_powered_ports_get  # noqa: E501

        Returns powered_ports rows for a given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_powered_ports_get(ip, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_powered_ports_get_with_http_info(ip, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_powered_ports_get_with_http_info(self, ip, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_powered_ports_get  # noqa: E501

        Returns powered_ports rows for a given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_powered_ports_get_with_http_info(ip, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ip'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_powered_ports_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_powered_ports_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}/powered_ports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_device_ip_ssids_get(self, ip, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_ssids_get  # noqa: E501

        Returns ssids rows for a given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_ssids_get(ip, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_ssids_get_with_http_info(ip, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_ssids_get_with_http_info(self, ip, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_ssids_get  # noqa: E501

        Returns ssids rows for a given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_ssids_get_with_http_info(ip, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ip'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_ssids_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_ssids_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}/ssids', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_device_ip_vlans_get(self, ip, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_vlans_get  # noqa: E501

        Returns vlans rows for a given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_vlans_get(ip, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[Vlan]
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_vlans_get_with_http_info(ip, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_vlans_get_with_http_info(self, ip, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_vlans_get  # noqa: E501

        Returns vlans rows for a given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_vlans_get_with_http_info(ip, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[Vlan], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'ip'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_vlans_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_vlans_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {
            200: "list[Vlan]",
        }

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}/vlans', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_device_ip_wireless_ports_get(self, ip, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_wireless_ports_get  # noqa: E501

        Returns wireless_ports rows for a given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_wireless_ports_get(ip, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_device_ip_wireless_ports_get_with_http_info(ip, **kwargs)  # noqa: E501

    def api_v1_object_device_ip_wireless_ports_get_with_http_info(self, ip, **kwargs):  # noqa: E501
        """api_v1_object_device_ip_wireless_ports_get  # noqa: E501

        Returns wireless_ports rows for a given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_device_ip_wireless_ports_get_with_http_info(ip, async_req=True)
        >>> result = thread.get()

        :param ip: Canonical IP of the Device. Use Search methods to find this. (required)
        :type ip: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'ip'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_device_ip_wireless_ports_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in local_var_params or  # noqa: E501
                                                        local_var_params['ip'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ip` when calling `api_v1_object_device_ip_wireless_ports_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ip' in local_var_params:
            path_params['ip'] = local_var_params['ip']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/object/device/{ip}/wireless_ports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_object_vlan_vlan_nodes_get(self, vlan, **kwargs):  # noqa: E501
        """api_v1_object_vlan_vlan_nodes_get  # noqa: E501

        Returns the nodes found in a given VLAN  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_vlan_vlan_nodes_get(vlan, async_req=True)
        >>> result = thread.get()

        :param vlan: VLAN number (required)
        :type vlan: int
        :param active_only: Restrict results to active Nodes only
        :type active_only: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_object_vlan_vlan_nodes_get_with_http_info(vlan, **kwargs)  # noqa: E501

    def api_v1_object_vlan_vlan_nodes_get_with_http_info(self, vlan, **kwargs):  # noqa: E501
        """api_v1_object_vlan_vlan_nodes_get  # noqa: E501

        Returns the nodes found in a given VLAN  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_object_vlan_vlan_nodes_get_with_http_info(vlan, async_req=True)
        >>> result = thread.get()

        :param vlan: VLAN number (required)
        :type vlan: int
        :param active_only: Restrict results to active Nodes only
        :type active_only: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'vlan',
            'active_only'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_object_vlan_vlan_nodes_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'vlan' is set
        if self.api_client.client_side_validation and ('vlan' not in local_var_params or  # noqa: E501
                                                        local_var_params['vlan'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `vlan` when calling `api_v1_object_vlan_vlan_nodes_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vlan' in local_var_params:
            path_params['vlan'] = local_var_params['vlan']  # noqa: E501

        query_params = []
        if 'active_only' in local_var_params and local_var_params['active_only'] is not None:  # noqa: E501
            query_params.append(('active_only', local_var_params['active_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/object/vlan/{vlan}/nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
