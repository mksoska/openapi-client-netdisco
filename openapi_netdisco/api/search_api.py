# coding: utf-8

"""
    App::Netdisco

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.050003
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_netdisco.api_client import ApiClient
from openapi_netdisco.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SearchApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_search_device_get(self, **kwargs):  # noqa: E501
        """api_v1_search_device_get  # noqa: E501

        Device Search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_search_device_get(async_req=True)
        >>> result = thread.get()

        :param q: Partial match of Device contact, serial, chassis ID, module serials, location, name, description, dns, or any IP alias
        :type q: str
        :param name: Partial match of the Device name
        :type name: str
        :param location: Partial match of the Device location
        :type location: str
        :param dns: Partial match of any of the Device IP aliases
        :type dns: str
        :param ip: IP or IP Prefix within which the Device must have an interface address
        :type ip: str
        :param description: Partial match of the Device description
        :type description: str
        :param mac: MAC Address of the Device or any of its Interfaces
        :type mac: str
        :param model: Exact match of the Device model
        :type model: str
        :param os: Exact match of the Device operating system
        :type os: str
        :param os_ver: Exact match of the Device operating system version
        :type os_ver: str
        :param vendor: Exact match of the Device vendor
        :type vendor: str
        :param layers: OSI Layer which the device must support
        :type layers: str
        :param matchall: If true, all fields (except \"q\") must match the Device
        :type matchall: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_search_device_get_with_http_info(**kwargs)  # noqa: E501

    def api_v1_search_device_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_v1_search_device_get  # noqa: E501

        Device Search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_search_device_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param q: Partial match of Device contact, serial, chassis ID, module serials, location, name, description, dns, or any IP alias
        :type q: str
        :param name: Partial match of the Device name
        :type name: str
        :param location: Partial match of the Device location
        :type location: str
        :param dns: Partial match of any of the Device IP aliases
        :type dns: str
        :param ip: IP or IP Prefix within which the Device must have an interface address
        :type ip: str
        :param description: Partial match of the Device description
        :type description: str
        :param mac: MAC Address of the Device or any of its Interfaces
        :type mac: str
        :param model: Exact match of the Device model
        :type model: str
        :param os: Exact match of the Device operating system
        :type os: str
        :param os_ver: Exact match of the Device operating system version
        :type os_ver: str
        :param vendor: Exact match of the Device vendor
        :type vendor: str
        :param layers: OSI Layer which the device must support
        :type layers: str
        :param matchall: If true, all fields (except \"q\") must match the Device
        :type matchall: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'q',
            'name',
            'location',
            'dns',
            'ip',
            'description',
            'mac',
            'model',
            'os',
            'os_ver',
            'vendor',
            'layers',
            'matchall'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_search_device_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in local_var_params and local_var_params['q'] is not None:  # noqa: E501
            query_params.append(('q', local_var_params['q']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'location' in local_var_params and local_var_params['location'] is not None:  # noqa: E501
            query_params.append(('location', local_var_params['location']))  # noqa: E501
        if 'dns' in local_var_params and local_var_params['dns'] is not None:  # noqa: E501
            query_params.append(('dns', local_var_params['dns']))  # noqa: E501
        if 'ip' in local_var_params and local_var_params['ip'] is not None:  # noqa: E501
            query_params.append(('ip', local_var_params['ip']))  # noqa: E501
        if 'description' in local_var_params and local_var_params['description'] is not None:  # noqa: E501
            query_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'mac' in local_var_params and local_var_params['mac'] is not None:  # noqa: E501
            query_params.append(('mac', local_var_params['mac']))  # noqa: E501
        if 'model' in local_var_params and local_var_params['model'] is not None:  # noqa: E501
            query_params.append(('model', local_var_params['model']))  # noqa: E501
        if 'os' in local_var_params and local_var_params['os'] is not None:  # noqa: E501
            query_params.append(('os', local_var_params['os']))  # noqa: E501
        if 'os_ver' in local_var_params and local_var_params['os_ver'] is not None:  # noqa: E501
            query_params.append(('os_ver', local_var_params['os_ver']))  # noqa: E501
        if 'vendor' in local_var_params and local_var_params['vendor'] is not None:  # noqa: E501
            query_params.append(('vendor', local_var_params['vendor']))  # noqa: E501
        if 'layers' in local_var_params and local_var_params['layers'] is not None:  # noqa: E501
            query_params.append(('layers', local_var_params['layers']))  # noqa: E501
        if 'matchall' in local_var_params and local_var_params['matchall'] is not None:  # noqa: E501
            query_params.append(('matchall', local_var_params['matchall']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/search/device', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_search_node_get(self, **kwargs):  # noqa: E501
        """api_v1_search_node_get  # noqa: E501

        Node Search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_search_node_get(async_req=True)
        >>> result = thread.get()

        :param q: MAC Address or IP Address or Hostname (without Domain Suffix) of a Node (supports SQL or \"*\" wildcards)
        :type q: str
        :param partial: Partially match the \"q\" parameter (wildcard characters not required)
        :type partial: bool
        :param deviceports: MAC Address search will include Device Port MACs
        :type deviceports: bool
        :param show_vendor: Include interface Vendor in results
        :type show_vendor: bool
        :param archived: Include archived records in results
        :type archived: bool
        :param daterange: Date Range in format \"YYYY-MM-DD to YYYY-MM-DD\"
        :type daterange: str
        :param age_invert: Results should NOT be within daterange
        :type age_invert: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_search_node_get_with_http_info(**kwargs)  # noqa: E501

    def api_v1_search_node_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_v1_search_node_get  # noqa: E501

        Node Search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_search_node_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param q: MAC Address or IP Address or Hostname (without Domain Suffix) of a Node (supports SQL or \"*\" wildcards)
        :type q: str
        :param partial: Partially match the \"q\" parameter (wildcard characters not required)
        :type partial: bool
        :param deviceports: MAC Address search will include Device Port MACs
        :type deviceports: bool
        :param show_vendor: Include interface Vendor in results
        :type show_vendor: bool
        :param archived: Include archived records in results
        :type archived: bool
        :param daterange: Date Range in format \"YYYY-MM-DD to YYYY-MM-DD\"
        :type daterange: str
        :param age_invert: Results should NOT be within daterange
        :type age_invert: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'q',
            'partial',
            'deviceports',
            'show_vendor',
            'archived',
            'daterange',
            'age_invert'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_search_node_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in local_var_params and local_var_params['q'] is not None:  # noqa: E501
            query_params.append(('q', local_var_params['q']))  # noqa: E501
        if 'partial' in local_var_params and local_var_params['partial'] is not None:  # noqa: E501
            query_params.append(('partial', local_var_params['partial']))  # noqa: E501
        if 'deviceports' in local_var_params and local_var_params['deviceports'] is not None:  # noqa: E501
            query_params.append(('deviceports', local_var_params['deviceports']))  # noqa: E501
        if 'show_vendor' in local_var_params and local_var_params['show_vendor'] is not None:  # noqa: E501
            query_params.append(('show_vendor', local_var_params['show_vendor']))  # noqa: E501
        if 'archived' in local_var_params and local_var_params['archived'] is not None:  # noqa: E501
            query_params.append(('archived', local_var_params['archived']))  # noqa: E501
        if 'daterange' in local_var_params and local_var_params['daterange'] is not None:  # noqa: E501
            query_params.append(('daterange', local_var_params['daterange']))  # noqa: E501
        if 'age_invert' in local_var_params and local_var_params['age_invert'] is not None:  # noqa: E501
            query_params.append(('age_invert', local_var_params['age_invert']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/search/node', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_search_port_get(self, **kwargs):  # noqa: E501
        """api_v1_search_port_get  # noqa: E501

        Port Search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_search_port_get(async_req=True)
        >>> result = thread.get()

        :param q: Port name or VLAN or MAC address
        :type q: str
        :param partial: Search for a partial match on parameter \"q\"
        :type partial: bool
        :param uplink: Include uplinks in results
        :type uplink: bool
        :param ethernet: Only Ethernet type interfaces in results
        :type ethernet: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_search_port_get_with_http_info(**kwargs)  # noqa: E501

    def api_v1_search_port_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_v1_search_port_get  # noqa: E501

        Port Search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_search_port_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param q: Port name or VLAN or MAC address
        :type q: str
        :param partial: Search for a partial match on parameter \"q\"
        :type partial: bool
        :param uplink: Include uplinks in results
        :type uplink: bool
        :param ethernet: Only Ethernet type interfaces in results
        :type ethernet: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'q',
            'partial',
            'uplink',
            'ethernet'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_search_port_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in local_var_params and local_var_params['q'] is not None:  # noqa: E501
            query_params.append(('q', local_var_params['q']))  # noqa: E501
        if 'partial' in local_var_params and local_var_params['partial'] is not None:  # noqa: E501
            query_params.append(('partial', local_var_params['partial']))  # noqa: E501
        if 'uplink' in local_var_params and local_var_params['uplink'] is not None:  # noqa: E501
            query_params.append(('uplink', local_var_params['uplink']))  # noqa: E501
        if 'ethernet' in local_var_params and local_var_params['ethernet'] is not None:  # noqa: E501
            query_params.append(('ethernet', local_var_params['ethernet']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/search/port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_search_vlan_get(self, **kwargs):  # noqa: E501
        """api_v1_search_vlan_get  # noqa: E501

        VLAN Search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_search_vlan_get(async_req=True)
        >>> result = thread.get()

        :param q: VLAN name or number
        :type q: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_search_vlan_get_with_http_info(**kwargs)  # noqa: E501

    def api_v1_search_vlan_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_v1_search_vlan_get  # noqa: E501

        VLAN Search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_search_vlan_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param q: VLAN name or number
        :type q: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'q'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_search_vlan_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in local_var_params and local_var_params['q'] is not None:  # noqa: E501
            query_params.append(('q', local_var_params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/search/vlan', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
