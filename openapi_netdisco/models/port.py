# coding: utf-8

"""
    App::Netdisco

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.050003
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_netdisco.configuration import Configuration


class Port(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ip': 'str',
        'remote_ip': 'str',
        'port': 'str',
        'remote_port': 'str',
        'is_master': 'bool',
        'slave_of': 'str',
        'name': 'str',
        'creation': 'str',
        'descr': 'str',
        'type': 'str',
        'remote_type': 'str',
        'duplex': 'str',
        'duplex_admin': 'str',
        'speed': 'str',
        'speed_admin': 'str',
        'mac': 'str',
        'remote_id': 'str',
        'mtu': 'int',
        'vlan': 'str',
        'pvid': 'str',
        'up': 'str',
        'up_admin': 'str',
        'stp': 'str',
        'manual_topo': 'bool',
        'last_change': 'bool',
        'is_uplink': 'bool'
    }

    attribute_map = {
        'ip': 'ip',
        'remote_ip': 'remote_ip',
        'port': 'port',
        'remote_port': 'remote_port',
        'is_master': 'is_master',
        'slave_of': 'slave_of',
        'name': 'name',
        'creation': 'creation',
        'descr': 'descr',
        'type': 'type',
        'remote_type': 'remote_type',
        'duplex': 'duplex',
        'duplex_admin': 'duplex_admin',
        'speed': 'speed',
        'speed_admin': 'speed_admin',
        'mac': 'mac',
        'remote_id': 'remote_id',
        'mtu': 'mtu',
        'vlan': 'vlan',
        'pvid': 'pvid',
        'up': 'up',
        'up_admin': 'up_admin',
        'stp': 'stp',
        'manual_topo': 'manual_topo',
        'last_change': 'last_change',
        'is_uplink': 'is_uplink'
    }

    def __init__(self, ip=None, remote_ip=None, port=None, remote_port=None, is_master=None, slave_of=None, name=None, creation=None, descr=None, type=None, remote_type=None, duplex=None, duplex_admin=None, speed=None, speed_admin=None, mac=None, remote_id=None, mtu=None, vlan=None, pvid=None, up=None, up_admin=None, stp=None, manual_topo=None, last_change=None, is_uplink=None, local_vars_configuration=None):  # noqa: E501
        """Port - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._ip = None
        self._remote_ip = None
        self._port = None
        self._remote_port = None
        self._is_master = None
        self._slave_of = None
        self._name = None
        self._creation = None
        self._descr = None
        self._type = None
        self._remote_type = None
        self._duplex = None
        self._duplex_admin = None
        self._speed = None
        self._speed_admin = None
        self._mac = None
        self._remote_id = None
        self._mtu = None
        self._vlan = None
        self._pvid = None
        self._up = None
        self._up_admin = None
        self._stp = None
        self._manual_topo = None
        self._last_change = None
        self._is_uplink = None
        self.discriminator = None

        self.ip = ip
        if remote_ip is not None:
            self.remote_ip = remote_ip
        self.port = port
        if remote_port is not None:
            self.remote_port = remote_port
        if is_master is not None:
            self.is_master = is_master
        if slave_of is not None:
            self.slave_of = slave_of
        if name is not None:
            self.name = name
        if creation is not None:
            self.creation = creation
        if descr is not None:
            self.descr = descr
        if type is not None:
            self.type = type
        if remote_type is not None:
            self.remote_type = remote_type
        if duplex is not None:
            self.duplex = duplex
        if duplex_admin is not None:
            self.duplex_admin = duplex_admin
        if speed is not None:
            self.speed = speed
        if speed_admin is not None:
            self.speed_admin = speed_admin
        if mac is not None:
            self.mac = mac
        if remote_id is not None:
            self.remote_id = remote_id
        if mtu is not None:
            self.mtu = mtu
        if vlan is not None:
            self.vlan = vlan
        if pvid is not None:
            self.pvid = pvid
        if up is not None:
            self.up = up
        if up_admin is not None:
            self.up_admin = up_admin
        if stp is not None:
            self.stp = stp
        if manual_topo is not None:
            self.manual_topo = manual_topo
        if last_change is not None:
            self.last_change = last_change
        if is_uplink is not None:
            self.is_uplink = is_uplink

    @property
    def ip(self):
        """Gets the ip of this Port.  # noqa: E501


        :return: The ip of this Port.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Port.


        :param ip: The ip of this Port.  # noqa: E501
        :type ip: str
        """
        if self.local_vars_configuration.client_side_validation and ip is None:  # noqa: E501
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def remote_ip(self):
        """Gets the remote_ip of this Port.  # noqa: E501


        :return: The remote_ip of this Port.  # noqa: E501
        :rtype: str
        """
        return self._remote_ip

    @remote_ip.setter
    def remote_ip(self, remote_ip):
        """Sets the remote_ip of this Port.


        :param remote_ip: The remote_ip of this Port.  # noqa: E501
        :type remote_ip: str
        """

        self._remote_ip = remote_ip

    @property
    def port(self):
        """Gets the port of this Port.  # noqa: E501


        :return: The port of this Port.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Port.


        :param port: The port of this Port.  # noqa: E501
        :type port: str
        """
        if self.local_vars_configuration.client_side_validation and port is None:  # noqa: E501
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def remote_port(self):
        """Gets the remote_port of this Port.  # noqa: E501


        :return: The remote_port of this Port.  # noqa: E501
        :rtype: str
        """
        return self._remote_port

    @remote_port.setter
    def remote_port(self, remote_port):
        """Sets the remote_port of this Port.


        :param remote_port: The remote_port of this Port.  # noqa: E501
        :type remote_port: str
        """

        self._remote_port = remote_port

    @property
    def is_master(self):
        """Gets the is_master of this Port.  # noqa: E501


        :return: The is_master of this Port.  # noqa: E501
        :rtype: bool
        """
        return self._is_master

    @is_master.setter
    def is_master(self, is_master):
        """Sets the is_master of this Port.


        :param is_master: The is_master of this Port.  # noqa: E501
        :type is_master: bool
        """

        self._is_master = is_master

    @property
    def slave_of(self):
        """Gets the slave_of of this Port.  # noqa: E501


        :return: The slave_of of this Port.  # noqa: E501
        :rtype: str
        """
        return self._slave_of

    @slave_of.setter
    def slave_of(self, slave_of):
        """Sets the slave_of of this Port.


        :param slave_of: The slave_of of this Port.  # noqa: E501
        :type slave_of: str
        """

        self._slave_of = slave_of

    @property
    def name(self):
        """Gets the name of this Port.  # noqa: E501


        :return: The name of this Port.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Port.


        :param name: The name of this Port.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def creation(self):
        """Gets the creation of this Port.  # noqa: E501


        :return: The creation of this Port.  # noqa: E501
        :rtype: str
        """
        return self._creation

    @creation.setter
    def creation(self, creation):
        """Sets the creation of this Port.


        :param creation: The creation of this Port.  # noqa: E501
        :type creation: str
        """

        self._creation = creation

    @property
    def descr(self):
        """Gets the descr of this Port.  # noqa: E501


        :return: The descr of this Port.  # noqa: E501
        :rtype: str
        """
        return self._descr

    @descr.setter
    def descr(self, descr):
        """Sets the descr of this Port.


        :param descr: The descr of this Port.  # noqa: E501
        :type descr: str
        """

        self._descr = descr

    @property
    def type(self):
        """Gets the type of this Port.  # noqa: E501


        :return: The type of this Port.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Port.


        :param type: The type of this Port.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def remote_type(self):
        """Gets the remote_type of this Port.  # noqa: E501


        :return: The remote_type of this Port.  # noqa: E501
        :rtype: str
        """
        return self._remote_type

    @remote_type.setter
    def remote_type(self, remote_type):
        """Sets the remote_type of this Port.


        :param remote_type: The remote_type of this Port.  # noqa: E501
        :type remote_type: str
        """

        self._remote_type = remote_type

    @property
    def duplex(self):
        """Gets the duplex of this Port.  # noqa: E501


        :return: The duplex of this Port.  # noqa: E501
        :rtype: str
        """
        return self._duplex

    @duplex.setter
    def duplex(self, duplex):
        """Sets the duplex of this Port.


        :param duplex: The duplex of this Port.  # noqa: E501
        :type duplex: str
        """

        self._duplex = duplex

    @property
    def duplex_admin(self):
        """Gets the duplex_admin of this Port.  # noqa: E501


        :return: The duplex_admin of this Port.  # noqa: E501
        :rtype: str
        """
        return self._duplex_admin

    @duplex_admin.setter
    def duplex_admin(self, duplex_admin):
        """Sets the duplex_admin of this Port.


        :param duplex_admin: The duplex_admin of this Port.  # noqa: E501
        :type duplex_admin: str
        """

        self._duplex_admin = duplex_admin

    @property
    def speed(self):
        """Gets the speed of this Port.  # noqa: E501


        :return: The speed of this Port.  # noqa: E501
        :rtype: str
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this Port.


        :param speed: The speed of this Port.  # noqa: E501
        :type speed: str
        """

        self._speed = speed

    @property
    def speed_admin(self):
        """Gets the speed_admin of this Port.  # noqa: E501


        :return: The speed_admin of this Port.  # noqa: E501
        :rtype: str
        """
        return self._speed_admin

    @speed_admin.setter
    def speed_admin(self, speed_admin):
        """Sets the speed_admin of this Port.


        :param speed_admin: The speed_admin of this Port.  # noqa: E501
        :type speed_admin: str
        """

        self._speed_admin = speed_admin

    @property
    def mac(self):
        """Gets the mac of this Port.  # noqa: E501


        :return: The mac of this Port.  # noqa: E501
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this Port.


        :param mac: The mac of this Port.  # noqa: E501
        :type mac: str
        """

        self._mac = mac

    @property
    def remote_id(self):
        """Gets the remote_id of this Port.  # noqa: E501


        :return: The remote_id of this Port.  # noqa: E501
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this Port.


        :param remote_id: The remote_id of this Port.  # noqa: E501
        :type remote_id: str
        """

        self._remote_id = remote_id

    @property
    def mtu(self):
        """Gets the mtu of this Port.  # noqa: E501


        :return: The mtu of this Port.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this Port.


        :param mtu: The mtu of this Port.  # noqa: E501
        :type mtu: int
        """

        self._mtu = mtu

    @property
    def vlan(self):
        """Gets the vlan of this Port.  # noqa: E501


        :return: The vlan of this Port.  # noqa: E501
        :rtype: str
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """Sets the vlan of this Port.


        :param vlan: The vlan of this Port.  # noqa: E501
        :type vlan: str
        """

        self._vlan = vlan

    @property
    def pvid(self):
        """Gets the pvid of this Port.  # noqa: E501


        :return: The pvid of this Port.  # noqa: E501
        :rtype: str
        """
        return self._pvid

    @pvid.setter
    def pvid(self, pvid):
        """Sets the pvid of this Port.


        :param pvid: The pvid of this Port.  # noqa: E501
        :type pvid: str
        """

        self._pvid = pvid

    @property
    def up(self):
        """Gets the up of this Port.  # noqa: E501


        :return: The up of this Port.  # noqa: E501
        :rtype: str
        """
        return self._up

    @up.setter
    def up(self, up):
        """Sets the up of this Port.


        :param up: The up of this Port.  # noqa: E501
        :type up: str
        """

        self._up = up

    @property
    def up_admin(self):
        """Gets the up_admin of this Port.  # noqa: E501


        :return: The up_admin of this Port.  # noqa: E501
        :rtype: str
        """
        return self._up_admin

    @up_admin.setter
    def up_admin(self, up_admin):
        """Sets the up_admin of this Port.


        :param up_admin: The up_admin of this Port.  # noqa: E501
        :type up_admin: str
        """

        self._up_admin = up_admin

    @property
    def stp(self):
        """Gets the stp of this Port.  # noqa: E501


        :return: The stp of this Port.  # noqa: E501
        :rtype: str
        """
        return self._stp

    @stp.setter
    def stp(self, stp):
        """Sets the stp of this Port.


        :param stp: The stp of this Port.  # noqa: E501
        :type stp: str
        """

        self._stp = stp

    @property
    def manual_topo(self):
        """Gets the manual_topo of this Port.  # noqa: E501


        :return: The manual_topo of this Port.  # noqa: E501
        :rtype: bool
        """
        return self._manual_topo

    @manual_topo.setter
    def manual_topo(self, manual_topo):
        """Sets the manual_topo of this Port.


        :param manual_topo: The manual_topo of this Port.  # noqa: E501
        :type manual_topo: bool
        """

        self._manual_topo = manual_topo

    @property
    def last_change(self):
        """Gets the last_change of this Port.  # noqa: E501


        :return: The last_change of this Port.  # noqa: E501
        :rtype: bool
        """
        return self._last_change

    @last_change.setter
    def last_change(self, last_change):
        """Sets the last_change of this Port.


        :param last_change: The last_change of this Port.  # noqa: E501
        :type last_change: bool
        """

        self._last_change = last_change

    @property
    def is_uplink(self):
        """Gets the is_uplink of this Port.  # noqa: E501


        :return: The is_uplink of this Port.  # noqa: E501
        :rtype: bool
        """
        return self._is_uplink

    @is_uplink.setter
    def is_uplink(self, is_uplink):
        """Sets the is_uplink of this Port.


        :param is_uplink: The is_uplink of this Port.  # noqa: E501
        :type is_uplink: bool
        """

        self._is_uplink = is_uplink

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Port):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Port):
            return True

        return self.to_dict() != other.to_dict()
