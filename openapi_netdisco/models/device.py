# coding: utf-8

"""
    App::Netdisco

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.050003
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_netdisco.configuration import Configuration


class Device(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ip': 'str',
        'name': 'str',
        'dns': 'str',
        'location': 'str',
        'contact': 'str',
        'vendor': 'str',
        'os': 'str',
        'os_ver': 'str',
        'model': 'str',
        'serial': 'str',
        'chassis_id': 'str',
        'description': 'str',
        'snmp_class': 'str',
        'snmp_comm': 'str',
        'snmp_ver': 'int',
        'snmp_engineid': 'str',
        'uptime': 'int',
        'creation': 'str',
        'layers': 'str',
        'slots': 'str',
        'last_discover': 'str',
        'last_arpnip': 'str',
        'last_macsuck': 'str',
        'mac': 'str',
        'vtp_domain': 'str',
        'is_pseudo': 'bool',
        'log': 'str'
    }

    attribute_map = {
        'ip': 'ip',
        'name': 'name',
        'dns': 'dns',
        'location': 'location',
        'contact': 'contact',
        'vendor': 'vendor',
        'os': 'os',
        'os_ver': 'os_ver',
        'model': 'model',
        'serial': 'serial',
        'chassis_id': 'chassis_id',
        'description': 'description',
        'snmp_class': 'snmp_class',
        'snmp_comm': 'snmp_comm',
        'snmp_ver': 'snmp_ver',
        'snmp_engineid': 'snmp_engineid',
        'uptime': 'uptime',
        'creation': 'creation',
        'layers': 'layers',
        'slots': 'slots',
        'last_discover': 'last_discover',
        'last_arpnip': 'last_arpnip',
        'last_macsuck': 'last_macsuck',
        'mac': 'mac',
        'vtp_domain': 'vtp_domain',
        'is_pseudo': 'is_pseudo',
        'log': 'log'
    }

    def __init__(self, ip=None, name=None, dns=None, location=None, contact=None, vendor=None, os=None, os_ver=None, model=None, serial=None, chassis_id=None, description=None, snmp_class=None, snmp_comm=None, snmp_ver=None, snmp_engineid=None, uptime=None, creation=None, layers=None, slots=None, last_discover=None, last_arpnip=None, last_macsuck=None, mac=None, vtp_domain=None, is_pseudo=None, log=None, local_vars_configuration=None):  # noqa: E501
        """Device - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._ip = None
        self._name = None
        self._dns = None
        self._location = None
        self._contact = None
        self._vendor = None
        self._os = None
        self._os_ver = None
        self._model = None
        self._serial = None
        self._chassis_id = None
        self._description = None
        self._snmp_class = None
        self._snmp_comm = None
        self._snmp_ver = None
        self._snmp_engineid = None
        self._uptime = None
        self._creation = None
        self._layers = None
        self._slots = None
        self._last_discover = None
        self._last_arpnip = None
        self._last_macsuck = None
        self._mac = None
        self._vtp_domain = None
        self._is_pseudo = None
        self._log = None
        self.discriminator = None

        self.ip = ip
        if name is not None:
            self.name = name
        if dns is not None:
            self.dns = dns
        if location is not None:
            self.location = location
        if contact is not None:
            self.contact = contact
        if vendor is not None:
            self.vendor = vendor
        if os is not None:
            self.os = os
        if os_ver is not None:
            self.os_ver = os_ver
        if model is not None:
            self.model = model
        if serial is not None:
            self.serial = serial
        if chassis_id is not None:
            self.chassis_id = chassis_id
        if description is not None:
            self.description = description
        if snmp_class is not None:
            self.snmp_class = snmp_class
        if snmp_comm is not None:
            self.snmp_comm = snmp_comm
        if snmp_ver is not None:
            self.snmp_ver = snmp_ver
        if snmp_engineid is not None:
            self.snmp_engineid = snmp_engineid
        if uptime is not None:
            self.uptime = uptime
        if creation is not None:
            self.creation = creation
        if layers is not None:
            self.layers = layers
        if slots is not None:
            self.slots = slots
        if last_discover is not None:
            self.last_discover = last_discover
        if last_arpnip is not None:
            self.last_arpnip = last_arpnip
        if last_macsuck is not None:
            self.last_macsuck = last_macsuck
        if mac is not None:
            self.mac = mac
        if vtp_domain is not None:
            self.vtp_domain = vtp_domain
        if is_pseudo is not None:
            self.is_pseudo = is_pseudo
        if log is not None:
            self.log = log

    @property
    def ip(self):
        """Gets the ip of this Device.  # noqa: E501


        :return: The ip of this Device.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Device.


        :param ip: The ip of this Device.  # noqa: E501
        :type ip: str
        """
        if self.local_vars_configuration.client_side_validation and ip is None:  # noqa: E501
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def name(self):
        """Gets the name of this Device.  # noqa: E501


        :return: The name of this Device.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Device.


        :param name: The name of this Device.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def dns(self):
        """Gets the dns of this Device.  # noqa: E501


        :return: The dns of this Device.  # noqa: E501
        :rtype: str
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this Device.


        :param dns: The dns of this Device.  # noqa: E501
        :type dns: str
        """

        self._dns = dns

    @property
    def location(self):
        """Gets the location of this Device.  # noqa: E501


        :return: The location of this Device.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Device.


        :param location: The location of this Device.  # noqa: E501
        :type location: str
        """

        self._location = location

    @property
    def contact(self):
        """Gets the contact of this Device.  # noqa: E501


        :return: The contact of this Device.  # noqa: E501
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Device.


        :param contact: The contact of this Device.  # noqa: E501
        :type contact: str
        """

        self._contact = contact

    @property
    def vendor(self):
        """Gets the vendor of this Device.  # noqa: E501


        :return: The vendor of this Device.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this Device.


        :param vendor: The vendor of this Device.  # noqa: E501
        :type vendor: str
        """

        self._vendor = vendor

    @property
    def os(self):
        """Gets the os of this Device.  # noqa: E501


        :return: The os of this Device.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this Device.


        :param os: The os of this Device.  # noqa: E501
        :type os: str
        """

        self._os = os

    @property
    def os_ver(self):
        """Gets the os_ver of this Device.  # noqa: E501


        :return: The os_ver of this Device.  # noqa: E501
        :rtype: str
        """
        return self._os_ver

    @os_ver.setter
    def os_ver(self, os_ver):
        """Sets the os_ver of this Device.


        :param os_ver: The os_ver of this Device.  # noqa: E501
        :type os_ver: str
        """

        self._os_ver = os_ver

    @property
    def model(self):
        """Gets the model of this Device.  # noqa: E501


        :return: The model of this Device.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Device.


        :param model: The model of this Device.  # noqa: E501
        :type model: str
        """

        self._model = model

    @property
    def serial(self):
        """Gets the serial of this Device.  # noqa: E501


        :return: The serial of this Device.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this Device.


        :param serial: The serial of this Device.  # noqa: E501
        :type serial: str
        """

        self._serial = serial

    @property
    def chassis_id(self):
        """Gets the chassis_id of this Device.  # noqa: E501


        :return: The chassis_id of this Device.  # noqa: E501
        :rtype: str
        """
        return self._chassis_id

    @chassis_id.setter
    def chassis_id(self, chassis_id):
        """Sets the chassis_id of this Device.


        :param chassis_id: The chassis_id of this Device.  # noqa: E501
        :type chassis_id: str
        """

        self._chassis_id = chassis_id

    @property
    def description(self):
        """Gets the description of this Device.  # noqa: E501


        :return: The description of this Device.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Device.


        :param description: The description of this Device.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def snmp_class(self):
        """Gets the snmp_class of this Device.  # noqa: E501


        :return: The snmp_class of this Device.  # noqa: E501
        :rtype: str
        """
        return self._snmp_class

    @snmp_class.setter
    def snmp_class(self, snmp_class):
        """Sets the snmp_class of this Device.


        :param snmp_class: The snmp_class of this Device.  # noqa: E501
        :type snmp_class: str
        """

        self._snmp_class = snmp_class

    @property
    def snmp_comm(self):
        """Gets the snmp_comm of this Device.  # noqa: E501


        :return: The snmp_comm of this Device.  # noqa: E501
        :rtype: str
        """
        return self._snmp_comm

    @snmp_comm.setter
    def snmp_comm(self, snmp_comm):
        """Sets the snmp_comm of this Device.


        :param snmp_comm: The snmp_comm of this Device.  # noqa: E501
        :type snmp_comm: str
        """

        self._snmp_comm = snmp_comm

    @property
    def snmp_ver(self):
        """Gets the snmp_ver of this Device.  # noqa: E501


        :return: The snmp_ver of this Device.  # noqa: E501
        :rtype: int
        """
        return self._snmp_ver

    @snmp_ver.setter
    def snmp_ver(self, snmp_ver):
        """Sets the snmp_ver of this Device.


        :param snmp_ver: The snmp_ver of this Device.  # noqa: E501
        :type snmp_ver: int
        """

        self._snmp_ver = snmp_ver

    @property
    def snmp_engineid(self):
        """Gets the snmp_engineid of this Device.  # noqa: E501


        :return: The snmp_engineid of this Device.  # noqa: E501
        :rtype: str
        """
        return self._snmp_engineid

    @snmp_engineid.setter
    def snmp_engineid(self, snmp_engineid):
        """Sets the snmp_engineid of this Device.


        :param snmp_engineid: The snmp_engineid of this Device.  # noqa: E501
        :type snmp_engineid: str
        """

        self._snmp_engineid = snmp_engineid

    @property
    def uptime(self):
        """Gets the uptime of this Device.  # noqa: E501


        :return: The uptime of this Device.  # noqa: E501
        :rtype: int
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this Device.


        :param uptime: The uptime of this Device.  # noqa: E501
        :type uptime: int
        """

        self._uptime = uptime

    @property
    def creation(self):
        """Gets the creation of this Device.  # noqa: E501


        :return: The creation of this Device.  # noqa: E501
        :rtype: str
        """
        return self._creation

    @creation.setter
    def creation(self, creation):
        """Sets the creation of this Device.


        :param creation: The creation of this Device.  # noqa: E501
        :type creation: str
        """

        self._creation = creation

    @property
    def layers(self):
        """Gets the layers of this Device.  # noqa: E501


        :return: The layers of this Device.  # noqa: E501
        :rtype: str
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this Device.


        :param layers: The layers of this Device.  # noqa: E501
        :type layers: str
        """

        self._layers = layers

    @property
    def slots(self):
        """Gets the slots of this Device.  # noqa: E501


        :return: The slots of this Device.  # noqa: E501
        :rtype: str
        """
        return self._slots

    @slots.setter
    def slots(self, slots):
        """Sets the slots of this Device.


        :param slots: The slots of this Device.  # noqa: E501
        :type slots: str
        """

        self._slots = slots

    @property
    def last_discover(self):
        """Gets the last_discover of this Device.  # noqa: E501


        :return: The last_discover of this Device.  # noqa: E501
        :rtype: str
        """
        return self._last_discover

    @last_discover.setter
    def last_discover(self, last_discover):
        """Sets the last_discover of this Device.


        :param last_discover: The last_discover of this Device.  # noqa: E501
        :type last_discover: str
        """

        self._last_discover = last_discover

    @property
    def last_arpnip(self):
        """Gets the last_arpnip of this Device.  # noqa: E501


        :return: The last_arpnip of this Device.  # noqa: E501
        :rtype: str
        """
        return self._last_arpnip

    @last_arpnip.setter
    def last_arpnip(self, last_arpnip):
        """Sets the last_arpnip of this Device.


        :param last_arpnip: The last_arpnip of this Device.  # noqa: E501
        :type last_arpnip: str
        """

        self._last_arpnip = last_arpnip

    @property
    def last_macsuck(self):
        """Gets the last_macsuck of this Device.  # noqa: E501


        :return: The last_macsuck of this Device.  # noqa: E501
        :rtype: str
        """
        return self._last_macsuck

    @last_macsuck.setter
    def last_macsuck(self, last_macsuck):
        """Sets the last_macsuck of this Device.


        :param last_macsuck: The last_macsuck of this Device.  # noqa: E501
        :type last_macsuck: str
        """

        self._last_macsuck = last_macsuck

    @property
    def mac(self):
        """Gets the mac of this Device.  # noqa: E501


        :return: The mac of this Device.  # noqa: E501
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this Device.


        :param mac: The mac of this Device.  # noqa: E501
        :type mac: str
        """

        self._mac = mac

    @property
    def vtp_domain(self):
        """Gets the vtp_domain of this Device.  # noqa: E501


        :return: The vtp_domain of this Device.  # noqa: E501
        :rtype: str
        """
        return self._vtp_domain

    @vtp_domain.setter
    def vtp_domain(self, vtp_domain):
        """Sets the vtp_domain of this Device.


        :param vtp_domain: The vtp_domain of this Device.  # noqa: E501
        :type vtp_domain: str
        """

        self._vtp_domain = vtp_domain

    @property
    def is_pseudo(self):
        """Gets the is_pseudo of this Device.  # noqa: E501


        :return: The is_pseudo of this Device.  # noqa: E501
        :rtype: bool
        """
        return self._is_pseudo

    @is_pseudo.setter
    def is_pseudo(self, is_pseudo):
        """Sets the is_pseudo of this Device.


        :param is_pseudo: The is_pseudo of this Device.  # noqa: E501
        :type is_pseudo: bool
        """

        self._is_pseudo = is_pseudo

    @property
    def log(self):
        """Gets the log of this Device.  # noqa: E501


        :return: The log of this Device.  # noqa: E501
        :rtype: str
        """
        return self._log

    @log.setter
    def log(self, log):
        """Sets the log of this Device.


        :param log: The log of this Device.  # noqa: E501
        :type log: str
        """

        self._log = log

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Device):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Device):
            return True

        return self.to_dict() != other.to_dict()
